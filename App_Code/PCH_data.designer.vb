'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="PCH_DB")>  _
Partial Public Class PCH_dataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSYMPTON(instance As SYMPTON)
    End Sub
  Partial Private Sub UpdateSYMPTON(instance As SYMPTON)
    End Sub
  Partial Private Sub DeleteSYMPTON(instance As SYMPTON)
    End Sub
  Partial Private Sub InsertUSER(instance As USER)
    End Sub
  Partial Private Sub UpdateUSER(instance As USER)
    End Sub
  Partial Private Sub DeleteUSER(instance As USER)
    End Sub
  Partial Private Sub InsertREFFERAL(instance As REFFERAL)
    End Sub
  Partial Private Sub UpdateREFFERAL(instance As REFFERAL)
    End Sub
  Partial Private Sub DeleteREFFERAL(instance As REFFERAL)
    End Sub
  Partial Private Sub InsertPRESCRIPTION_LIST(instance As PRESCRIPTION_LIST)
    End Sub
  Partial Private Sub UpdatePRESCRIPTION_LIST(instance As PRESCRIPTION_LIST)
    End Sub
  Partial Private Sub DeletePRESCRIPTION_LIST(instance As PRESCRIPTION_LIST)
    End Sub
  Partial Private Sub InsertPATIENT(instance As PATIENT)
    End Sub
  Partial Private Sub UpdatePATIENT(instance As PATIENT)
    End Sub
  Partial Private Sub DeletePATIENT(instance As PATIENT)
    End Sub
  Partial Private Sub InsertPAT_PRESCRIPTION(instance As PAT_PRESCRIPTION)
    End Sub
  Partial Private Sub UpdatePAT_PRESCRIPTION(instance As PAT_PRESCRIPTION)
    End Sub
  Partial Private Sub DeletePAT_PRESCRIPTION(instance As PAT_PRESCRIPTION)
    End Sub
  Partial Private Sub InsertOPD(instance As OPD)
    End Sub
  Partial Private Sub UpdateOPD(instance As OPD)
    End Sub
  Partial Private Sub DeleteOPD(instance As OPD)
    End Sub
  Partial Private Sub InsertNEXT_OF_KIN(instance As NEXT_OF_KIN)
    End Sub
  Partial Private Sub UpdateNEXT_OF_KIN(instance As NEXT_OF_KIN)
    End Sub
  Partial Private Sub DeleteNEXT_OF_KIN(instance As NEXT_OF_KIN)
    End Sub
  Partial Private Sub InsertCONSULTATION(instance As CONSULTATION)
    End Sub
  Partial Private Sub UpdateCONSULTATION(instance As CONSULTATION)
    End Sub
  Partial Private Sub DeleteCONSULTATION(instance As CONSULTATION)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("PCH_DBConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property SYMPTONs() As System.Data.Linq.Table(Of SYMPTON)
		Get
			Return Me.GetTable(Of SYMPTON)
		End Get
	End Property
	
	Public ReadOnly Property USERs() As System.Data.Linq.Table(Of USER)
		Get
			Return Me.GetTable(Of USER)
		End Get
	End Property
	
	Public ReadOnly Property REFFERALs() As System.Data.Linq.Table(Of REFFERAL)
		Get
			Return Me.GetTable(Of REFFERAL)
		End Get
	End Property
	
	Public ReadOnly Property PRESCRIPTION_LISTs() As System.Data.Linq.Table(Of PRESCRIPTION_LIST)
		Get
			Return Me.GetTable(Of PRESCRIPTION_LIST)
		End Get
	End Property
	
	Public ReadOnly Property PATIENTs() As System.Data.Linq.Table(Of PATIENT)
		Get
			Return Me.GetTable(Of PATIENT)
		End Get
	End Property
	
	Public ReadOnly Property PAT_PRESCRIPTIONs() As System.Data.Linq.Table(Of PAT_PRESCRIPTION)
		Get
			Return Me.GetTable(Of PAT_PRESCRIPTION)
		End Get
	End Property
	
	Public ReadOnly Property OPDs() As System.Data.Linq.Table(Of OPD)
		Get
			Return Me.GetTable(Of OPD)
		End Get
	End Property
	
	Public ReadOnly Property NEXT_OF_KINs() As System.Data.Linq.Table(Of NEXT_OF_KIN)
		Get
			Return Me.GetTable(Of NEXT_OF_KIN)
		End Get
	End Property
	
	Public ReadOnly Property CONSULTATIONs() As System.Data.Linq.Table(Of CONSULTATION)
		Get
			Return Me.GetTable(Of CONSULTATION)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SYMPTON")>  _
Partial Public Class SYMPTON
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SYMPTON_ID As String
	
	Private _SYMPTON As String
	
	Private _CONSULTATIONs As EntitySet(Of CONSULTATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSYMPTON_IDChanging(value As String)
    End Sub
    Partial Private Sub OnSYMPTON_IDChanged()
    End Sub
    Partial Private Sub OnSYMPTONChanging(value As String)
    End Sub
    Partial Private Sub OnSYMPTONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONSULTATIONs = New EntitySet(Of CONSULTATION)(AddressOf Me.attach_CONSULTATIONs, AddressOf Me.detach_CONSULTATIONs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SYMPTON_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SYMPTON_ID() As String
		Get
			Return Me._SYMPTON_ID
		End Get
		Set
			If (String.Equals(Me._SYMPTON_ID, value) = false) Then
				Me.OnSYMPTON_IDChanging(value)
				Me.SendPropertyChanging
				Me._SYMPTON_ID = value
				Me.SendPropertyChanged("SYMPTON_ID")
				Me.OnSYMPTON_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SYMPTON", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property SYMPTON() As String
		Get
			Return Me._SYMPTON
		End Get
		Set
			If (String.Equals(Me._SYMPTON, value) = false) Then
				Me.OnSYMPTONChanging(value)
				Me.SendPropertyChanging
				Me._SYMPTON = value
				Me.SendPropertyChanged("SYMPTON")
				Me.OnSYMPTONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SYMPTON_CONSULTATION", Storage:="_CONSULTATIONs", ThisKey:="SYMPTON_ID", OtherKey:="SYMPTONS_ID")>  _
	Public Property CONSULTATIONs() As EntitySet(Of CONSULTATION)
		Get
			Return Me._CONSULTATIONs
		End Get
		Set
			Me._CONSULTATIONs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.SYMPTON = Me
	End Sub
	
	Private Sub detach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.SYMPTON = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.USERS")>  _
Partial Public Class USER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _USER_ID As String
	
	Private _FIRST_NAME As String
	
	Private _LAST_NAME As String
	
	Private _PHONE As String
	
	Private _USERNAME As String
	
	Private _IMAGE As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUSER_IDChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_IDChanged()
    End Sub
    Partial Private Sub OnFIRST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRST_NAMEChanged()
    End Sub
    Partial Private Sub OnLAST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_NAMEChanged()
    End Sub
    Partial Private Sub OnPHONEChanging(value As String)
    End Sub
    Partial Private Sub OnPHONEChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    Partial Private Sub OnIMAGEChanging(value As String)
    End Sub
    Partial Private Sub OnIMAGEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property USER_ID() As String
		Get
			Return Me._USER_ID
		End Get
		Set
			If (String.Equals(Me._USER_ID, value) = false) Then
				Me.OnUSER_IDChanging(value)
				Me.SendPropertyChanging
				Me._USER_ID = value
				Me.SendPropertyChanged("USER_ID")
				Me.OnUSER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRST_NAME", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property FIRST_NAME() As String
		Get
			Return Me._FIRST_NAME
		End Get
		Set
			If (String.Equals(Me._FIRST_NAME, value) = false) Then
				Me.OnFIRST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRST_NAME = value
				Me.SendPropertyChanged("FIRST_NAME")
				Me.OnFIRST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_NAME", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property LAST_NAME() As String
		Get
			Return Me._LAST_NAME
		End Get
		Set
			If (String.Equals(Me._LAST_NAME, value) = false) Then
				Me.OnLAST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_NAME = value
				Me.SendPropertyChanged("LAST_NAME")
				Me.OnLAST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PHONE", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PHONE() As String
		Get
			Return Me._PHONE
		End Get
		Set
			If (String.Equals(Me._PHONE, value) = false) Then
				Me.OnPHONEChanging(value)
				Me.SendPropertyChanging
				Me._PHONE = value
				Me.SendPropertyChanged("PHONE")
				Me.OnPHONEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(25)")>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMAGE", DbType:="VarChar(70)")>  _
	Public Property IMAGE() As String
		Get
			Return Me._IMAGE
		End Get
		Set
			If (String.Equals(Me._IMAGE, value) = false) Then
				Me.OnIMAGEChanging(value)
				Me.SendPropertyChanging
				Me._IMAGE = value
				Me.SendPropertyChanged("IMAGE")
				Me.OnIMAGEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.REFFERAL")>  _
Partial Public Class REFFERAL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _USER_ID As String
	
	Private _PATIENT_ID As String
	
	Private _DATE As Date
	
	Private _REFFERED_TO As String
	
	Private _CONSULT_ID As String
	
	Private _REF_ID As String
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUSER_IDChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_IDChanged()
    End Sub
    Partial Private Sub OnPATIENT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPATIENT_IDChanged()
    End Sub
    Partial Private Sub OnDATEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATEChanged()
    End Sub
    Partial Private Sub OnREFFERED_TOChanging(value As String)
    End Sub
    Partial Private Sub OnREFFERED_TOChanged()
    End Sub
    Partial Private Sub OnCONSULT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCONSULT_IDChanged()
    End Sub
    Partial Private Sub OnREF_IDChanging(value As String)
    End Sub
    Partial Private Sub OnREF_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property USER_ID() As String
		Get
			Return Me._USER_ID
		End Get
		Set
			If (String.Equals(Me._USER_ID, value) = false) Then
				Me.OnUSER_IDChanging(value)
				Me.SendPropertyChanging
				Me._USER_ID = value
				Me.SendPropertyChanged("USER_ID")
				Me.OnUSER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PATIENT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PATIENT_ID() As String
		Get
			Return Me._PATIENT_ID
		End Get
		Set
			If (String.Equals(Me._PATIENT_ID, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPATIENT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PATIENT_ID = value
				Me.SendPropertyChanged("PATIENT_ID")
				Me.OnPATIENT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="DATE", Storage:="_DATE", DbType:="Date NOT NULL")>  _
	Public Property [DATE]() As Date
		Get
			Return Me._DATE
		End Get
		Set
			If ((Me._DATE = value)  _
						= false) Then
				Me.OnDATEChanging(value)
				Me.SendPropertyChanging
				Me._DATE = value
				Me.SendPropertyChanged("[DATE]")
				Me.OnDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFFERED_TO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property REFFERED_TO() As String
		Get
			Return Me._REFFERED_TO
		End Get
		Set
			If (String.Equals(Me._REFFERED_TO, value) = false) Then
				Me.OnREFFERED_TOChanging(value)
				Me.SendPropertyChanging
				Me._REFFERED_TO = value
				Me.SendPropertyChanged("REFFERED_TO")
				Me.OnREFFERED_TOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONSULT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property CONSULT_ID() As String
		Get
			Return Me._CONSULT_ID
		End Get
		Set
			If (String.Equals(Me._CONSULT_ID, value) = false) Then
				Me.OnCONSULT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONSULT_ID = value
				Me.SendPropertyChanged("CONSULT_ID")
				Me.OnCONSULT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REF_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property REF_ID() As String
		Get
			Return Me._REF_ID
		End Get
		Set
			If (String.Equals(Me._REF_ID, value) = false) Then
				Me.OnREF_IDChanging(value)
				Me.SendPropertyChanging
				Me._REF_ID = value
				Me.SendPropertyChanged("REF_ID")
				Me.OnREF_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_REFFERAL", Storage:="_PATIENT", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.REFFERALs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.REFFERALs.Add(Me)
					Me._PATIENT_ID = value.PATIENT_ID
				Else
					Me._PATIENT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PRESCRIPTION_LIST")>  _
Partial Public Class PRESCRIPTION_LIST
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRESCRIPTION_NAME As String
	
	Private _PRESCRIPTION_ID As String
	
	Private _PAT_PRESCRIPTIONs As EntitySet(Of PAT_PRESCRIPTION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRESCRIPTION_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnPRESCRIPTION_NAMEChanged()
    End Sub
    Partial Private Sub OnPRESCRIPTION_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRESCRIPTION_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PAT_PRESCRIPTIONs = New EntitySet(Of PAT_PRESCRIPTION)(AddressOf Me.attach_PAT_PRESCRIPTIONs, AddressOf Me.detach_PAT_PRESCRIPTIONs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRESCRIPTION_NAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PRESCRIPTION_NAME() As String
		Get
			Return Me._PRESCRIPTION_NAME
		End Get
		Set
			If (String.Equals(Me._PRESCRIPTION_NAME, value) = false) Then
				Me.OnPRESCRIPTION_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._PRESCRIPTION_NAME = value
				Me.SendPropertyChanged("PRESCRIPTION_NAME")
				Me.OnPRESCRIPTION_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRESCRIPTION_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PRESCRIPTION_ID() As String
		Get
			Return Me._PRESCRIPTION_ID
		End Get
		Set
			If (String.Equals(Me._PRESCRIPTION_ID, value) = false) Then
				Me.OnPRESCRIPTION_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRESCRIPTION_ID = value
				Me.SendPropertyChanged("PRESCRIPTION_ID")
				Me.OnPRESCRIPTION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRESCRIPTION_LIST_PAT_PRESCRIPTION", Storage:="_PAT_PRESCRIPTIONs", ThisKey:="PRESCRIPTION_ID", OtherKey:="PRESCRIPTION_ID")>  _
	Public Property PAT_PRESCRIPTIONs() As EntitySet(Of PAT_PRESCRIPTION)
		Get
			Return Me._PAT_PRESCRIPTIONs
		End Get
		Set
			Me._PAT_PRESCRIPTIONs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PAT_PRESCRIPTIONs(ByVal entity As PAT_PRESCRIPTION)
		Me.SendPropertyChanging
		entity.PRESCRIPTION_LIST = Me
	End Sub
	
	Private Sub detach_PAT_PRESCRIPTIONs(ByVal entity As PAT_PRESCRIPTION)
		Me.SendPropertyChanging
		entity.PRESCRIPTION_LIST = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PATIENT")>  _
Partial Public Class PATIENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PATIENT_ID As String
	
	Private _FIRST_NAME As String
	
	Private _LAST_NAME As String
	
	Private _GENDER As String
	
	Private _DOB As Date
	
	Private _ADDRESS As String
	
	Private _IMAGE As String
	
	Private _TELEPHONE As String
	
	Private _REGISTER_DATE As System.Nullable(Of Date)
	
	Private _REFFERALs As EntitySet(Of REFFERAL)
	
	Private _PAT_PRESCRIPTIONs As EntitySet(Of PAT_PRESCRIPTION)
	
	Private _OPDs As EntitySet(Of OPD)
	
	Private _NEXT_OF_KIN As EntityRef(Of NEXT_OF_KIN)
	
	Private _CONSULTATIONs As EntitySet(Of CONSULTATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPATIENT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPATIENT_IDChanged()
    End Sub
    Partial Private Sub OnFIRST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRST_NAMEChanged()
    End Sub
    Partial Private Sub OnLAST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_NAMEChanged()
    End Sub
    Partial Private Sub OnGENDERChanging(value As String)
    End Sub
    Partial Private Sub OnGENDERChanged()
    End Sub
    Partial Private Sub OnDOBChanging(value As Date)
    End Sub
    Partial Private Sub OnDOBChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnIMAGEChanging(value As String)
    End Sub
    Partial Private Sub OnIMAGEChanged()
    End Sub
    Partial Private Sub OnTELEPHONEChanging(value As String)
    End Sub
    Partial Private Sub OnTELEPHONEChanged()
    End Sub
    Partial Private Sub OnREGISTER_DATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnREGISTER_DATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._REFFERALs = New EntitySet(Of REFFERAL)(AddressOf Me.attach_REFFERALs, AddressOf Me.detach_REFFERALs)
		Me._PAT_PRESCRIPTIONs = New EntitySet(Of PAT_PRESCRIPTION)(AddressOf Me.attach_PAT_PRESCRIPTIONs, AddressOf Me.detach_PAT_PRESCRIPTIONs)
		Me._OPDs = New EntitySet(Of OPD)(AddressOf Me.attach_OPDs, AddressOf Me.detach_OPDs)
		Me._NEXT_OF_KIN = CType(Nothing, EntityRef(Of NEXT_OF_KIN))
		Me._CONSULTATIONs = New EntitySet(Of CONSULTATION)(AddressOf Me.attach_CONSULTATIONs, AddressOf Me.detach_CONSULTATIONs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PATIENT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PATIENT_ID() As String
		Get
			Return Me._PATIENT_ID
		End Get
		Set
			If (String.Equals(Me._PATIENT_ID, value) = false) Then
				Me.OnPATIENT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PATIENT_ID = value
				Me.SendPropertyChanged("PATIENT_ID")
				Me.OnPATIENT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRST_NAME", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property FIRST_NAME() As String
		Get
			Return Me._FIRST_NAME
		End Get
		Set
			If (String.Equals(Me._FIRST_NAME, value) = false) Then
				Me.OnFIRST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRST_NAME = value
				Me.SendPropertyChanged("FIRST_NAME")
				Me.OnFIRST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_NAME", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property LAST_NAME() As String
		Get
			Return Me._LAST_NAME
		End Get
		Set
			If (String.Equals(Me._LAST_NAME, value) = false) Then
				Me.OnLAST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_NAME = value
				Me.SendPropertyChanged("LAST_NAME")
				Me.OnLAST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GENDER", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property GENDER() As String
		Get
			Return Me._GENDER
		End Get
		Set
			If (String.Equals(Me._GENDER, value) = false) Then
				Me.OnGENDERChanging(value)
				Me.SendPropertyChanging
				Me._GENDER = value
				Me.SendPropertyChanged("GENDER")
				Me.OnGENDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOB", DbType:="Date NOT NULL")>  _
	Public Property DOB() As Date
		Get
			Return Me._DOB
		End Get
		Set
			If ((Me._DOB = value)  _
						= false) Then
				Me.OnDOBChanging(value)
				Me.SendPropertyChanging
				Me._DOB = value
				Me.SendPropertyChanged("DOB")
				Me.OnDOBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IMAGE", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property IMAGE() As String
		Get
			Return Me._IMAGE
		End Get
		Set
			If (String.Equals(Me._IMAGE, value) = false) Then
				Me.OnIMAGEChanging(value)
				Me.SendPropertyChanging
				Me._IMAGE = value
				Me.SendPropertyChanged("IMAGE")
				Me.OnIMAGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEPHONE", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property TELEPHONE() As String
		Get
			Return Me._TELEPHONE
		End Get
		Set
			If (String.Equals(Me._TELEPHONE, value) = false) Then
				Me.OnTELEPHONEChanging(value)
				Me.SendPropertyChanging
				Me._TELEPHONE = value
				Me.SendPropertyChanged("TELEPHONE")
				Me.OnTELEPHONEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGISTER_DATE", DbType:="Date")>  _
	Public Property REGISTER_DATE() As System.Nullable(Of Date)
		Get
			Return Me._REGISTER_DATE
		End Get
		Set
			If (Me._REGISTER_DATE.Equals(value) = false) Then
				Me.OnREGISTER_DATEChanging(value)
				Me.SendPropertyChanging
				Me._REGISTER_DATE = value
				Me.SendPropertyChanged("REGISTER_DATE")
				Me.OnREGISTER_DATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_REFFERAL", Storage:="_REFFERALs", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID")>  _
	Public Property REFFERALs() As EntitySet(Of REFFERAL)
		Get
			Return Me._REFFERALs
		End Get
		Set
			Me._REFFERALs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_PAT_PRESCRIPTION", Storage:="_PAT_PRESCRIPTIONs", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID")>  _
	Public Property PAT_PRESCRIPTIONs() As EntitySet(Of PAT_PRESCRIPTION)
		Get
			Return Me._PAT_PRESCRIPTIONs
		End Get
		Set
			Me._PAT_PRESCRIPTIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_OPD", Storage:="_OPDs", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID")>  _
	Public Property OPDs() As EntitySet(Of OPD)
		Get
			Return Me._OPDs
		End Get
		Set
			Me._OPDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_NEXT_OF_KIN", Storage:="_NEXT_OF_KIN", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property NEXT_OF_KIN() As NEXT_OF_KIN
		Get
			Return Me._NEXT_OF_KIN.Entity
		End Get
		Set
			Dim previousValue As NEXT_OF_KIN = Me._NEXT_OF_KIN.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NEXT_OF_KIN.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NEXT_OF_KIN.Entity = Nothing
					previousValue.PATIENT = Nothing
				End If
				Me._NEXT_OF_KIN.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.PATIENT = Me
				End If
				Me.SendPropertyChanged("NEXT_OF_KIN")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_CONSULTATION", Storage:="_CONSULTATIONs", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID")>  _
	Public Property CONSULTATIONs() As EntitySet(Of CONSULTATION)
		Get
			Return Me._CONSULTATIONs
		End Get
		Set
			Me._CONSULTATIONs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_REFFERALs(ByVal entity As REFFERAL)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_REFFERALs(ByVal entity As REFFERAL)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
	
	Private Sub attach_PAT_PRESCRIPTIONs(ByVal entity As PAT_PRESCRIPTION)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_PAT_PRESCRIPTIONs(ByVal entity As PAT_PRESCRIPTION)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
	
	Private Sub attach_OPDs(ByVal entity As OPD)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_OPDs(ByVal entity As OPD)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
	
	Private Sub attach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PAT_PRESCRIPTION")>  _
Partial Public Class PAT_PRESCRIPTION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PRESCRIPTION_ID As String
	
	Private _PATIENT_ID As String
	
	Private _DATE As Date
	
	Private _ID As String
	
	Private _DOSAGE As String
	
	Private _FREQUENCEY As String
	
	Private _DURATION As String
	
	Private _MODE As String
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
	Private _PRESCRIPTION_LIST As EntityRef(Of PRESCRIPTION_LIST)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPRESCRIPTION_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPRESCRIPTION_IDChanged()
    End Sub
    Partial Private Sub OnPATIENT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPATIENT_IDChanged()
    End Sub
    Partial Private Sub OnDATEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATEChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDOSAGEChanging(value As String)
    End Sub
    Partial Private Sub OnDOSAGEChanged()
    End Sub
    Partial Private Sub OnFREQUENCEYChanging(value As String)
    End Sub
    Partial Private Sub OnFREQUENCEYChanged()
    End Sub
    Partial Private Sub OnDURATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDURATIONChanged()
    End Sub
    Partial Private Sub OnMODEChanging(value As String)
    End Sub
    Partial Private Sub OnMODEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		Me._PRESCRIPTION_LIST = CType(Nothing, EntityRef(Of PRESCRIPTION_LIST))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRESCRIPTION_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PRESCRIPTION_ID() As String
		Get
			Return Me._PRESCRIPTION_ID
		End Get
		Set
			If (String.Equals(Me._PRESCRIPTION_ID, value) = false) Then
				If Me._PRESCRIPTION_LIST.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPRESCRIPTION_IDChanging(value)
				Me.SendPropertyChanging
				Me._PRESCRIPTION_ID = value
				Me.SendPropertyChanged("PRESCRIPTION_ID")
				Me.OnPRESCRIPTION_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PATIENT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PATIENT_ID() As String
		Get
			Return Me._PATIENT_ID
		End Get
		Set
			If (String.Equals(Me._PATIENT_ID, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPATIENT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PATIENT_ID = value
				Me.SendPropertyChanged("PATIENT_ID")
				Me.OnPATIENT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="DATE", Storage:="_DATE", DbType:="Date NOT NULL")>  _
	Public Property [DATE]() As Date
		Get
			Return Me._DATE
		End Get
		Set
			If ((Me._DATE = value)  _
						= false) Then
				Me.OnDATEChanging(value)
				Me.SendPropertyChanging
				Me._DATE = value
				Me.SendPropertyChanged("[DATE]")
				Me.OnDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DOSAGE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DOSAGE() As String
		Get
			Return Me._DOSAGE
		End Get
		Set
			If (String.Equals(Me._DOSAGE, value) = false) Then
				Me.OnDOSAGEChanging(value)
				Me.SendPropertyChanging
				Me._DOSAGE = value
				Me.SendPropertyChanged("DOSAGE")
				Me.OnDOSAGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FREQUENCEY", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FREQUENCEY() As String
		Get
			Return Me._FREQUENCEY
		End Get
		Set
			If (String.Equals(Me._FREQUENCEY, value) = false) Then
				Me.OnFREQUENCEYChanging(value)
				Me.SendPropertyChanging
				Me._FREQUENCEY = value
				Me.SendPropertyChanged("FREQUENCEY")
				Me.OnFREQUENCEYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DURATION", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DURATION() As String
		Get
			Return Me._DURATION
		End Get
		Set
			If (String.Equals(Me._DURATION, value) = false) Then
				Me.OnDURATIONChanging(value)
				Me.SendPropertyChanging
				Me._DURATION = value
				Me.SendPropertyChanged("DURATION")
				Me.OnDURATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MODE() As String
		Get
			Return Me._MODE
		End Get
		Set
			If (String.Equals(Me._MODE, value) = false) Then
				Me.OnMODEChanging(value)
				Me.SendPropertyChanging
				Me._MODE = value
				Me.SendPropertyChanged("MODE")
				Me.OnMODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_PAT_PRESCRIPTION", Storage:="_PATIENT", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.PAT_PRESCRIPTIONs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PAT_PRESCRIPTIONs.Add(Me)
					Me._PATIENT_ID = value.PATIENT_ID
				Else
					Me._PATIENT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRESCRIPTION_LIST_PAT_PRESCRIPTION", Storage:="_PRESCRIPTION_LIST", ThisKey:="PRESCRIPTION_ID", OtherKey:="PRESCRIPTION_ID", IsForeignKey:=true)>  _
	Public Property PRESCRIPTION_LIST() As PRESCRIPTION_LIST
		Get
			Return Me._PRESCRIPTION_LIST.Entity
		End Get
		Set
			Dim previousValue As PRESCRIPTION_LIST = Me._PRESCRIPTION_LIST.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PRESCRIPTION_LIST.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PRESCRIPTION_LIST.Entity = Nothing
					previousValue.PAT_PRESCRIPTIONs.Remove(Me)
				End If
				Me._PRESCRIPTION_LIST.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PAT_PRESCRIPTIONs.Add(Me)
					Me._PRESCRIPTION_ID = value.PRESCRIPTION_ID
				Else
					Me._PRESCRIPTION_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PRESCRIPTION_LIST")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OPD")>  _
Partial Public Class OPD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PATIENT_ID As String
	
	Private _USER_ID As String
	
	Private _DATE As Date
	
	Private _TEMPERATURE As Integer
	
	Private _BP As Double
	
	Private _WEIGHT As Double
	
	Private _HEGHT As System.Nullable(Of Double)
	
	Private _OPD_ID As String
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPATIENT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPATIENT_IDChanged()
    End Sub
    Partial Private Sub OnUSER_IDChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_IDChanged()
    End Sub
    Partial Private Sub OnDATEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATEChanged()
    End Sub
    Partial Private Sub OnTEMPERATUREChanging(value As Integer)
    End Sub
    Partial Private Sub OnTEMPERATUREChanged()
    End Sub
    Partial Private Sub OnBPChanging(value As Double)
    End Sub
    Partial Private Sub OnBPChanged()
    End Sub
    Partial Private Sub OnWEIGHTChanging(value As Double)
    End Sub
    Partial Private Sub OnWEIGHTChanged()
    End Sub
    Partial Private Sub OnHEGHTChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnHEGHTChanged()
    End Sub
    Partial Private Sub OnOPD_IDChanging(value As String)
    End Sub
    Partial Private Sub OnOPD_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PATIENT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property PATIENT_ID() As String
		Get
			Return Me._PATIENT_ID
		End Get
		Set
			If (String.Equals(Me._PATIENT_ID, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPATIENT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PATIENT_ID = value
				Me.SendPropertyChanged("PATIENT_ID")
				Me.OnPATIENT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property USER_ID() As String
		Get
			Return Me._USER_ID
		End Get
		Set
			If (String.Equals(Me._USER_ID, value) = false) Then
				Me.OnUSER_IDChanging(value)
				Me.SendPropertyChanging
				Me._USER_ID = value
				Me.SendPropertyChanged("USER_ID")
				Me.OnUSER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="DATE", Storage:="_DATE", DbType:="DateTime NOT NULL")>  _
	Public Property [DATE]() As Date
		Get
			Return Me._DATE
		End Get
		Set
			If ((Me._DATE = value)  _
						= false) Then
				Me.OnDATEChanging(value)
				Me.SendPropertyChanging
				Me._DATE = value
				Me.SendPropertyChanged("[DATE]")
				Me.OnDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEMPERATURE", DbType:="Int NOT NULL")>  _
	Public Property TEMPERATURE() As Integer
		Get
			Return Me._TEMPERATURE
		End Get
		Set
			If ((Me._TEMPERATURE = value)  _
						= false) Then
				Me.OnTEMPERATUREChanging(value)
				Me.SendPropertyChanging
				Me._TEMPERATURE = value
				Me.SendPropertyChanged("TEMPERATURE")
				Me.OnTEMPERATUREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BP", DbType:="Float NOT NULL")>  _
	Public Property BP() As Double
		Get
			Return Me._BP
		End Get
		Set
			If ((Me._BP = value)  _
						= false) Then
				Me.OnBPChanging(value)
				Me.SendPropertyChanging
				Me._BP = value
				Me.SendPropertyChanged("BP")
				Me.OnBPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WEIGHT", DbType:="Float NOT NULL")>  _
	Public Property WEIGHT() As Double
		Get
			Return Me._WEIGHT
		End Get
		Set
			If ((Me._WEIGHT = value)  _
						= false) Then
				Me.OnWEIGHTChanging(value)
				Me.SendPropertyChanging
				Me._WEIGHT = value
				Me.SendPropertyChanged("WEIGHT")
				Me.OnWEIGHTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HEGHT", DbType:="Float")>  _
	Public Property HEGHT() As System.Nullable(Of Double)
		Get
			Return Me._HEGHT
		End Get
		Set
			If (Me._HEGHT.Equals(value) = false) Then
				Me.OnHEGHTChanging(value)
				Me.SendPropertyChanging
				Me._HEGHT = value
				Me.SendPropertyChanged("HEGHT")
				Me.OnHEGHTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OPD_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OPD_ID() As String
		Get
			Return Me._OPD_ID
		End Get
		Set
			If (String.Equals(Me._OPD_ID, value) = false) Then
				Me.OnOPD_IDChanging(value)
				Me.SendPropertyChanging
				Me._OPD_ID = value
				Me.SendPropertyChanged("OPD_ID")
				Me.OnOPD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_OPD", Storage:="_PATIENT", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.OPDs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OPDs.Add(Me)
					Me._PATIENT_ID = value.PATIENT_ID
				Else
					Me._PATIENT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NEXT_OF_KIN")>  _
Partial Public Class NEXT_OF_KIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PATIENT_ID As String
	
	Private _FIRST_NAME As String
	
	Private _LAST_NAME As String
	
	Private _ADDRESS As String
	
	Private _MOBILE As String
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPATIENT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPATIENT_IDChanged()
    End Sub
    Partial Private Sub OnFIRST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIRST_NAMEChanged()
    End Sub
    Partial Private Sub OnLAST_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnLAST_NAMEChanged()
    End Sub
    Partial Private Sub OnADDRESSChanging(value As String)
    End Sub
    Partial Private Sub OnADDRESSChanged()
    End Sub
    Partial Private Sub OnMOBILEChanging(value As String)
    End Sub
    Partial Private Sub OnMOBILEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PATIENT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PATIENT_ID() As String
		Get
			Return Me._PATIENT_ID
		End Get
		Set
			If (String.Equals(Me._PATIENT_ID, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPATIENT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PATIENT_ID = value
				Me.SendPropertyChanged("PATIENT_ID")
				Me.OnPATIENT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIRST_NAME", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property FIRST_NAME() As String
		Get
			Return Me._FIRST_NAME
		End Get
		Set
			If (String.Equals(Me._FIRST_NAME, value) = false) Then
				Me.OnFIRST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIRST_NAME = value
				Me.SendPropertyChanged("FIRST_NAME")
				Me.OnFIRST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LAST_NAME", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property LAST_NAME() As String
		Get
			Return Me._LAST_NAME
		End Get
		Set
			If (String.Equals(Me._LAST_NAME, value) = false) Then
				Me.OnLAST_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._LAST_NAME = value
				Me.SendPropertyChanged("LAST_NAME")
				Me.OnLAST_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADDRESS", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ADDRESS() As String
		Get
			Return Me._ADDRESS
		End Get
		Set
			If (String.Equals(Me._ADDRESS, value) = false) Then
				Me.OnADDRESSChanging(value)
				Me.SendPropertyChanging
				Me._ADDRESS = value
				Me.SendPropertyChanged("ADDRESS")
				Me.OnADDRESSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOBILE", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property MOBILE() As String
		Get
			Return Me._MOBILE
		End Get
		Set
			If (String.Equals(Me._MOBILE, value) = false) Then
				Me.OnMOBILEChanging(value)
				Me.SendPropertyChanging
				Me._MOBILE = value
				Me.SendPropertyChanged("MOBILE")
				Me.OnMOBILEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_NEXT_OF_KIN", Storage:="_PATIENT", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.NEXT_OF_KIN = Nothing
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NEXT_OF_KIN = Me
					Me._PATIENT_ID = value.PATIENT_ID
				Else
					Me._PATIENT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONSULTATION")>  _
Partial Public Class CONSULTATION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _USER_ID As String
	
	Private _PATIENT_ID As String
	
	Private _SYMPTONS_ID As String
	
	Private _CONSULT_ID As String
	
	Private _DATE As Date
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
	Private _SYMPTON As EntityRef(Of SYMPTON)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUSER_IDChanging(value As String)
    End Sub
    Partial Private Sub OnUSER_IDChanged()
    End Sub
    Partial Private Sub OnPATIENT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPATIENT_IDChanged()
    End Sub
    Partial Private Sub OnSYMPTONS_IDChanging(value As String)
    End Sub
    Partial Private Sub OnSYMPTONS_IDChanged()
    End Sub
    Partial Private Sub OnCONSULT_IDChanging(value As String)
    End Sub
    Partial Private Sub OnCONSULT_IDChanged()
    End Sub
    Partial Private Sub OnDATEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		Me._SYMPTON = CType(Nothing, EntityRef(Of SYMPTON))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USER_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property USER_ID() As String
		Get
			Return Me._USER_ID
		End Get
		Set
			If (String.Equals(Me._USER_ID, value) = false) Then
				Me.OnUSER_IDChanging(value)
				Me.SendPropertyChanging
				Me._USER_ID = value
				Me.SendPropertyChanged("USER_ID")
				Me.OnUSER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PATIENT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property PATIENT_ID() As String
		Get
			Return Me._PATIENT_ID
		End Get
		Set
			If (String.Equals(Me._PATIENT_ID, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPATIENT_IDChanging(value)
				Me.SendPropertyChanging
				Me._PATIENT_ID = value
				Me.SendPropertyChanged("PATIENT_ID")
				Me.OnPATIENT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SYMPTONS_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SYMPTONS_ID() As String
		Get
			Return Me._SYMPTONS_ID
		End Get
		Set
			If (String.Equals(Me._SYMPTONS_ID, value) = false) Then
				If Me._SYMPTON.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSYMPTONS_IDChanging(value)
				Me.SendPropertyChanging
				Me._SYMPTONS_ID = value
				Me.SendPropertyChanged("SYMPTONS_ID")
				Me.OnSYMPTONS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONSULT_ID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CONSULT_ID() As String
		Get
			Return Me._CONSULT_ID
		End Get
		Set
			If (String.Equals(Me._CONSULT_ID, value) = false) Then
				Me.OnCONSULT_IDChanging(value)
				Me.SendPropertyChanging
				Me._CONSULT_ID = value
				Me.SendPropertyChanged("CONSULT_ID")
				Me.OnCONSULT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="DATE", Storage:="_DATE", DbType:="DateTime NOT NULL")>  _
	Public Property [DATE]() As Date
		Get
			Return Me._DATE
		End Get
		Set
			If ((Me._DATE = value)  _
						= false) Then
				Me.OnDATEChanging(value)
				Me.SendPropertyChanging
				Me._DATE = value
				Me.SendPropertyChanged("[DATE]")
				Me.OnDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_CONSULTATION", Storage:="_PATIENT", ThisKey:="PATIENT_ID", OtherKey:="PATIENT_ID", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.CONSULTATIONs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONSULTATIONs.Add(Me)
					Me._PATIENT_ID = value.PATIENT_ID
				Else
					Me._PATIENT_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SYMPTON_CONSULTATION", Storage:="_SYMPTON", ThisKey:="SYMPTONS_ID", OtherKey:="SYMPTON_ID", IsForeignKey:=true)>  _
	Public Property SYMPTON() As SYMPTON
		Get
			Return Me._SYMPTON.Entity
		End Get
		Set
			Dim previousValue As SYMPTON = Me._SYMPTON.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SYMPTON.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SYMPTON.Entity = Nothing
					previousValue.CONSULTATIONs.Remove(Me)
				End If
				Me._SYMPTON.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONSULTATIONs.Add(Me)
					Me._SYMPTONS_ID = value.SYMPTON_ID
				Else
					Me._SYMPTONS_ID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SYMPTON")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
